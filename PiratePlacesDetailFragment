package edu.ecu.cs.pirateplaces

import android.app.Activity
import android.content.Intent
import android.content.pm.PackageManager
import android.content.pm.ResolveInfo
import android.net.Uri
import android.os.Bundle
import android.provider.ContactsContract
import android.provider.MediaStore
import android.text.Editable
import android.text.TextWatcher
import android.text.format.DateFormat
import android.view.*
import android.widget.*
import androidx.core.content.FileProvider
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProviders
import java.io.File
import java.util.*

private const val ARG_PLACE_ID = "place_id"
private const val DIALOG_DATE = "DialogDate"
private const val DIALOG_TIME = "DialogTime"
private const val REQUEST_DATE = 0
private const val REQUEST_TIME = 1
private const val REQUEST_CONTACT = 1
private const val REQUEST_PHOTO = 2
private const val DATE_FORMAT = "EEE, MMM, dd"
private const val TIME_FORMAT = "hh:mm a"

class PiratePlacesDetailFragment:
    Fragment(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks {

    private lateinit var place: PiratePlace
    private lateinit var photoFile: File
    private lateinit var photoUri: Uri

    private lateinit var placeNameField : EditText
    private lateinit var guestsField: TextView
    private lateinit var dateButton: Button
    private lateinit var timeButton: Button
    private lateinit var photoButton: ImageButton
    private lateinit var photoViewer: ImageView
    private lateinit var shareButton: Button

    private val piratePlacesDetailViewModel: PiratePlacesDetailViewModel by lazy {
        ViewModelProviders.of(this).get(PiratePlacesDetailViewModel::class.java)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        place = PiratePlace()
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_pirate_places_detail, container, false)

        placeNameField = view.findViewById(R.id.place_name) as EditText
        guestsField = view.findViewById(R.id.visited_with) as TextView
        dateButton = view.findViewById(R.id.check_in_date) as Button
        timeButton = view.findViewById(R.id.check_in_time) as Button
        photoButton = view.findViewById(R.id.place_camera) as ImageButton
        photoViewer = view.findViewById(R.id.place_photo) as ImageView
        shareButton= view.findViewById(R.id.send_my_visit) as Button

        dateButton.setOnClickListener {
            DatePickerFragment.newInstance(place.lastVisited).apply {
                setTargetFragment(this@PiratePlacesDetailFragment, REQUEST_DATE)
                show(this@PiratePlacesDetailFragment.parentFragmentManager, DIALOG_DATE)
            }
        }

        timeButton.setOnClickListener {
            TimePickerFragment.newInstance(place.lastVisited).apply {
                setTargetFragment(this@PiratePlacesDetailFragment, REQUEST_TIME)
                show(this@PiratePlacesDetailFragment.parentFragmentManager, DIALOG_TIME)
            }
        }

        photoButton.setOnClickListener {
            Toast.makeText(context, getString(R.string.camera_message), Toast.LENGTH_SHORT).show()
        }
        return view
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        piratePlacesDetailViewModel.pirateLiveData.observe(
            viewLifecycleOwner,
            Observer {  piratePlace ->
                piratePlace?.let {
                    this.place = piratePlace
                    photoFile = piratePlacesDetailViewModel.getPhotoFiles(place)
                    photoUri = FileProvider.getUriForFile(requireActivity(),
                        "edu.ecu.cs.pirateplaces.fileprovider", photoFile)
                    updateUI()
                }
            }
        )
        val placeId = arguments?.getSerializable(ARG_PLACE_ID) as UUID
        piratePlacesDetailViewModel.loadPiratePlace(placeId)
    }

    override fun onStart() {
        super.onStart()

        val placeNameWatcher = object : TextWatcher {
            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

            }

            override fun afterTextChanged(p0: Editable?) {

            }

            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
                place.name = p0.toString()
            }
        }

        guestsField.apply {
            val pickContactIntent =
                Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI)
            setOnClickListener{
                startActivityForResult(pickContactIntent, REQUEST_CONTACT)
            }
        }



        shareButton.apply {
            val pickContactIntent =
                Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI)
            setOnClickListener {
                startActivityForResult(pickContactIntent, REQUEST_CONTACT)
            }
            placeNameField.addTextChangedListener(placeNameWatcher)
            val packageManager: PackageManager = requireActivity().packageManager
            val resolvedActivity: ResolveInfo? =
                packageManager.resolveActivity(pickContactIntent, PackageManager.MATCH_DEFAULT_ONLY)
            if (resolvedActivity == null) {
                isEnabled = false
            }
            setOnClickListener {
                Intent(Intent.ACTION_SEND).apply {
                    type = "text/plain"
                    putExtra(Intent.EXTRA_TEXT, getPiratePlaces())
                    putExtra(Intent.EXTRA_SUBJECT,
                        getString(R.string.share_with_guest)) }.also { intent ->
                    val chooserIntent =
                        Intent.createChooser(intent, getString(R.string.send_my_visit))
                    startActivity(chooserIntent)
                }
            }
        }
        photoButton.apply {
            val packageManage: PackageManager = requireActivity().packageManager
            val imageCapture = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
            val activityResolver: ResolveInfo? =
                packageManage.resolveActivity(imageCapture, PackageManager.MATCH_DEFAULT_ONLY)
            if (activityResolver == null)
            {
                isEnabled = false }
            setOnClickListener {
                imageCapture.putExtra(MediaStore.EXTRA_OUTPUT, photoUri)
                val cameraActivities: List<ResolveInfo> = packageManage.queryIntentActivities(imageCapture,
                    PackageManager.MATCH_DEFAULT_ONLY)
                for (cameraActivity in cameraActivities) {
                    requireActivity().grantUriPermission(cameraActivity.activityInfo.packageName, photoUri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION)
                    startActivityForResult(imageCapture, REQUEST_PHOTO)
                }
            }
        }
    }

    override fun onStop() {
        super.onStop()
        piratePlacesDetailViewModel.savePiratePlace(place)
    }

    override fun onDetach() {
        super.onDetach()
        requireActivity().revokeUriPermission(photoUri,
            Intent.FLAG_GRANT_WRITE_URI_PERMISSION)
    }

    override fun onDateSelected(date: Date) {
        place.lastVisited = date
        updateUI()
    }

    override fun onTimeSelected(date: Date) {
        place.lastVisited = date
        updateUI()
    }

    private fun updateUI() {
        val visitedDate = DateFormat.getMediumDateFormat(context).format(place.lastVisited)
        val visitedTime = DateFormat.getTimeFormat(context).format(place.lastVisited)

        placeNameField.setText(place.name)
        guestsField.setHint(R.string.visited_with_hint)
        guestsField.setText(place.visitedWith)
        dateButton.text = visitedDate
        timeButton.text = visitedTime

        if (place.visitedWith.isNotEmpty())
        {
            guestsField.text = place.visitedWith }

        updatePhotoView()
    }

    private fun updatePhotoView()
    {
        if (photoFile.exists()) {
            val bitMapping = getScaledBitmap(photoFile.path, requireActivity())
            photoViewer.setImageBitmap(bitMapping)
        } else {
            photoViewer.setImageDrawable(null)
        }
    }

    private fun getPiratePlaces(): String {

        val dateString = DateFormat.format(DATE_FORMAT, place.lastVisited).toString()
        val timeString = DateFormat.format(TIME_FORMAT, place.lastVisited).toString()
        return if (place.visitedWith.isBlank()) {
            getString(R.string.share_without_guest, place.name, dateString, timeString)
        }
        else {
            return getString(R.string.share_with_guest, place.name, place.visitedWith, dateString, timeString)
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        when
        {
            resultCode != Activity.RESULT_OK -> return

            requestCode == REQUEST_CONTACT && data != null ->
            {
                val contactUri: Uri? = data.data

                val queryFields = arrayOf(ContactsContract.Contacts.DISPLAY_NAME)

                val cursor = contactUri?.let {
                    requireActivity().contentResolver
                        .query(it, queryFields, null, null, null)
                }
                cursor?.use {

                    if (it.count == 0) {
                        return
                    }

                    it.moveToFirst()
                    val visitedW = it.getString(0)
                    place.visitedWith = visitedW

                    piratePlacesDetailViewModel.savePiratePlace(place)
                    guestsField.text = visitedW
                }

            }
            requestCode == REQUEST_PHOTO ->
            {
                requireActivity().revokeUriPermission(photoUri,
                    Intent.FLAG_GRANT_WRITE_URI_PERMISSION)
                updatePhotoView()
            }
        }
    }

    companion object {
        fun newInstance(id: UUID) : PiratePlacesDetailFragment
        {
            val args = Bundle().apply {
                putSerializable(ARG_PLACE_ID, id)
            }
            return PiratePlacesDetailFragment().apply {
                arguments = args
            }
        }
    }

}
